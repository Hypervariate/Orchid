` --------------------------------------------------------
` Tile Studio Definition file for use with Dark Basic Pro Ver 1.052
` By Derek Danial Diaz (de749911@pegasus.cc.ucf.edu)
` Based on a Blitz Basic TSD file by Mike Wiering 
` 
` This file must be included in the main project file.
` The command "Gosub Init_Tile_Studio_Library" must 
` be used somewhere in the beginning of the main program
`
` Version 1.0 - June 28, 2004
` This TSD file is meant to work with dbpro_ScrollDemo.dbpro
` However, it can be modified for other purposes.
` --------------------------------------------------------


` --- create bitmap file ---------------------------------

#tileset
#tilebitmap graphics\\<TileSetIdentifier>.png 320
#end tilebitmap
#end tileset

` --------------------------------------------------------


#file <ProjectName>_include.dba
` ---------- Generated by Tile Studio ----------

`------------start of init subroutine-------------
Init_TileStudio_Library:

#tileset
#map
/#Constant LAYER_<TileSetIdentifier>_<MapIdentifier> = (<TileSetNumber> \<\< 8) + <MapNumber>
`remove the / from the above line!
#end map
#end tileset

` --- Set up variables ---

#tileset
#Sequence
Global <TileSetIdentifier>Seq<SequenceNumber>Length as integer
restore <TileSetIdentifier>Seq<SequenceNumber>MapData
repeat
	read <TileSetIdentifier>Seq<SequenceNumber>LengthDummy
	inc <TileSetIdentifier>Seq<SequenceNumber>Length,1
until <TileSetIdentifier>Seq<SequenceNumber>LengthDummy = -1
dec <TileSetIdentifier>Seq<SequenceNumber>Length, 1
#end Sequence
#end tileset

Global ReturnValueInt as integer

#tileset
<TileSetIdentifier>BitmapDummyVal = <TileSetNumber> + 1
Global <TileSetIdentifier>Bitmap =  <TileSetIdentifier>BitmapDummyVal
TempImageNumber = <TileSetIdentifier>Bitmap
#end tileset

#tileset
#map
Dim <TileSetIdentifier><MapIdentifier>Map(<MapHeight>, <MapWidth>)
Dim <TileSetIdentifier><MapIdentifier>BoundMap(<MapHeight>, <MapWidth>)
Dim <TileSetIdentifier>Sequences(<SequenceCount> + 1)
#sequence
Dim <TileSetIdentifier>Seq<SequenceNumber>(<TileSetIdentifier>Seq<SequenceNumber>Length) as integer
#end sequence
#end map
#end tileset

` --- Load graphics ---
Set Image Colorkey <TransparentColorR>, <TransparentColorG>, <TransparentColorB>

GetImageNumber = TempImageNumber 
#tileset
#map

Global LAYER_<TileSetIdentifier>_<MapIdentifier>_Offset
LAYER_<TileSetIdentifier>_<MapIdentifier>_Offset = GetImageNumber + 1


Load Image "graphics\\<TileSetIdentifier>.bmp", <TileSetIdentifier>Bitmap, 1
Paste Image <TileSetIdentifier>Bitmap, 0, 0
` Cut up the master image into individual tiles and give them an image number
For GetY = 0 to ((<VerticalTileCount> - 1) * <TileHeight>) step <TileHeight>
   For GetX = 0 to ((<HorizontalTileCount> - 1) * <TileWidth>) step <TileWidth>
      inc GetImageNumber
      Get Image GetImageNumber, GetX, GetY, GetX + <TileWidth>, GetY + <TileHeight>, 1
   Next GetX
Next GetY
cls `erase the screen

#end map
#end tileset

` --- Load data ---
#tileset
#map
Restore <TileSetIdentifier><MapIdentifier>MapData
For y = 0 To <MapHeight> - 1
  For x = 0 To <MapWidth> - 1
    Read <TileSetIdentifier><MapIdentifier>Map(y, x)
  Next x
Next y
Restore <TileSetIdentifier><MapIdentifier>BoundMapData
For y = 0 To <MapHeight> - 1
  For x = 0 To <MapWidth> - 1
    Read <TileSetIdentifier><MapIdentifier>BoundMap(y, x)
  Next x 
Next y

#end map
#end tileset

#tileset
#sequence 
restore <TileSetIdentifier>Seq<SequenceNumber>MapData
For LoadSeqData = 0 To <TileSetIdentifier>Seq<SequenceNumber>Length
	Read <TileSetIdentifier>Seq<SequenceNumber>(LoadSeqData)
Next LoadSeqData 
#end sequence
#end tileset

#tileset
#sequence "\n"
<TileSetIdentifier>Sequences(<SequenceNumber>) = <TileSetIdentifier>Seq<SequenceNumber>
#end sequence

` <TileSetIdentifier><MapIdentifier>Layer
` movement (x, y) = (x = <ScrollX>, y = <ScrollY>) 
#end tileset
Return
`------------end of init subroutine-------------


` get map width (tiles)
Function MapWidth (map)
#tileset
#map
      If map = LAYER_<TileSetIdentifier>_<MapIdentifier> Then ReturnValueInt = <MapWidth>
#end map
#end tileset
EndFunction ReturnValueInt 

` get map height (tiles)
Function MapHeight (map)
#tileset
#map
    if map = LAYER_<TileSetIdentifier>_<MapIdentifier> Then ReturnValueInt = <MapHeight>
#end map
#end tileset
EndFunction ReturnValueInt 

` get tile width (pixels)
Function TileWidth (map)
#tileset
#map
      if map = LAYER_<TileSetIdentifier>_<MapIdentifier> Then ReturnValueInt = <TileWidth>
#end map
#end tileset
EndFunction ReturnValueInt 

` get tile height (pixels)
Function TileHeight (map)
#tileset
#map
    if map = LAYER_<TileSetIdentifier>_<MapIdentifier> Then ReturnValueInt = <TileHeight>
#end map
#end tileset
EndFunction ReturnValueInt 


` --- DATA statements containg the tile maps---
#tileset

#map
<TileSetIdentifier><MapIdentifier>MapData:
#mapdata  "\nData "  ","  "\nData "  "\nData "  ""
<TileNumber:"%3d">
#end mapdata

` tile size: w = <TileWidth>, h = <TileHeight>
<TileSetIdentifier><MapIdentifier>BoundMapData:
#mapdata  "\nData "  ","  "\nData "  "\nData "  ""
 <BoundMapValue>
#end mapdata

#end map

#end tileset

` ---- Animation sequences
#tileset
#sequence
<TileSetIdentifier>Seq<SequenceNumber>MapData:
Data <SequenceNumber>
#sequencedata  "\nData "  ", " 
<TileNumber>, <FrameCount>
#end sequencedata
#end sequence
#end tileset
Data -1



` get tile number at position (x,y)
Function GetTile (map, x, y)
#tileset
#map
    if map = LAYER_<TileSetIdentifier>_<MapIdentifier> then ReturnValueInt = <TileSetIdentifier><MapIdentifier>Map(y, x) - 1 
#end map
#end tileset
EndFunction ReturnValueInt

` get bounds/map code at position (x,y)
Function GetBounds (map, x, y)
#tileset
#map
    if map = LAYER_<TileSetIdentifier>_<MapIdentifier> then ReturnValueInt = <TileSetIdentifier><MapIdentifier>BoundMap(y, x)
#end map
#end tileset
EndFunction ReturnValueInt

Function DrawTile (map, x, y, tile)
#tileset
#map
    if map = LAYER_<TileSetIdentifier>_<MapIdentifier> then paste image tile + LAYER_<TileSetIdentifier>_<MapIdentifier>_Offset, x, y, 1
#end map
#end tileset
EndFunction

` ---------- end of generated file ----------
#end file

`--------------------------------------------------------